// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEP_Management.Models;

#nullable disable

namespace SEP_Management.Migrations
{
    [DbContext(typeof(SEP_ManagementContext))]
    [Migration("20240305135944_initdatabase_v13")]
    partial class initdatabase_v13
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Assignment", b =>
                {
                    b.Property<int>("AssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assign_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignId"), 1L, 1);

                    b.Property<string>("AssignDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("assign_description");

                    b.Property<string>("AssignName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("assign_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("DueDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("due_date");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_active");

                    b.Property<string>("Part")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("part");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<short?>("UpdatedBy")
                        .HasColumnType("smallint")
                        .HasColumnName("updated_by");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("weight");

                    b.HasKey("AssignId");

                    b.HasIndex("SubjectId");

                    b.ToTable("assignment", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.AssignSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("setting_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"), 1L, 1);

                    b.Property<int>("AssignId")
                        .HasColumnType("int")
                        .HasColumnName("assign_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayOrder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_order");

                    b.Property<byte>("SettingGroup")
                        .HasColumnType("tinyint")
                        .HasColumnName("setting_group");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("setting_name");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("setting_value")
                        .IsFixedLength();

                    b.HasKey("SettingId");

                    b.HasIndex("AssignId");

                    b.ToTable("assign_setting", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("access_token");

                    b.Property<string>("ClassCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("class_code");

                    b.Property<string>("ClassDetails")
                        .HasColumnType("text")
                        .HasColumnName("class_details");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<short?>("CreatedBy")
                        .HasColumnType("smallint")
                        .HasColumnName("created_by");

                    b.Property<string>("GitlabId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("gitlab_id");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manager_id");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int")
                        .HasColumnName("semester_id");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<short?>("UpdatedBy")
                        .HasColumnType("smallint")
                        .HasColumnName("updated_by");

                    b.HasKey("ClassId");

                    b.ToTable("class", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.ClassStudent", b =>
                {
                    b.Property<int>("ClassStId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("class_st_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassStId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<short?>("CreatedBy")
                        .HasColumnType("smallint")
                        .HasColumnName("created_by");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_active");

                    b.Property<byte>("IsLeader")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_leader");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<short?>("UpdatedBy")
                        .HasColumnType("smallint")
                        .HasColumnName("updated_by");

                    b.HasKey("ClassStId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("class_student", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("issue_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("MilestoneId")
                        .HasColumnType("int")
                        .HasColumnName("milestone_id");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int")
                        .HasColumnName("process_id");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("IssueId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TypeId");

                    b.ToTable("issue", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.IssueSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("setting_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_active");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("SettingId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("issue_setting", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.IssueUpdate", b =>
                {
                    b.Property<int>("UpdatedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("updated_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpdatedId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("IssueId")
                        .HasColumnType("int")
                        .HasColumnName("issue_id");

                    b.Property<int?>("MilestoneId")
                        .HasColumnType("int")
                        .HasColumnName("milestone_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("UpdatedId");

                    b.HasIndex("IssueId");

                    b.ToTable("issue_update", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Milestone", b =>
                {
                    b.Property<int>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("milestone_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneId"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<string>("GitlabId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gitlab_id");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_active");

                    b.Property<string>("MilestoneName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("milestone_name");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("MilestoneId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId");

                    b.ToTable("milestone", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("access_token");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<string>("CoMentorId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("co_mentor_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("group_name");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mentor_id");

                    b.Property<string>("ProjectCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("project_code");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text")
                        .HasColumnName("project_description");

                    b.Property<string>("ProjectEnName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("project_en_name");

                    b.Property<string>("ProjectVieName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("project_vie_name");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClassId");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_active");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("manager_id");

                    b.Property<byte>("PassGrade")
                        .HasColumnType("tinyint")
                        .HasColumnName("pass_grade");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("subject_code");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject_name");

                    b.Property<string>("TimeAllocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("time_allocation");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("SubjectId");

                    b.HasIndex("ManagerId");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.SubjectSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("setting_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("SettingName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("setting_name");

                    b.Property<int?>("SettingType")
                        .HasColumnType("int")
                        .HasColumnName("setting_type");

                    b.Property<int?>("SettingValue")
                        .HasColumnType("int")
                        .HasColumnName("setting_value");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("SettingId");

                    b.HasIndex("SubjectId");

                    b.ToTable("subject_setting", (string)null);
                });

            modelBuilder.Entity("SEP_Management.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SEP_Management.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SEP_Management.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SEP_Management.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SEP_Management.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SEP_Management.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SEP_Management.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SEP_Management.Models.Assignment", b =>
                {
                    b.HasOne("SEP_Management.Models.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_assignment_subject");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SEP_Management.Models.AssignSetting", b =>
                {
                    b.HasOne("SEP_Management.Models.Assignment", "Assign")
                        .WithMany("AssignSettings")
                        .HasForeignKey("AssignId")
                        .IsRequired()
                        .HasConstraintName("FK_assign_setting_assignment");

                    b.Navigation("Assign");
                });

            modelBuilder.Entity("SEP_Management.Models.ClassStudent", b =>
                {
                    b.HasOne("SEP_Management.Models.Class", "Class")
                        .WithMany("ClassStudents")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_class_student_class");

                    b.HasOne("SEP_Management.Models.User", "Student")
                        .WithMany("ClassStudents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_class_student_user");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SEP_Management.Models.Issue", b =>
                {
                    b.HasOne("SEP_Management.Models.Milestone", "Milestone")
                        .WithMany("Issues")
                        .HasForeignKey("MilestoneId")
                        .HasConstraintName("FK_issue_milestone");

                    b.HasOne("SEP_Management.Models.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_issue_project");

                    b.HasOne("SEP_Management.Models.IssueSetting", "Type")
                        .WithMany("Issues")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_issue_issue_setting");

                    b.Navigation("Milestone");

                    b.Navigation("Project");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SEP_Management.Models.IssueSetting", b =>
                {
                    b.HasOne("SEP_Management.Models.Class", "Class")
                        .WithMany("IssueSettings")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_issue_setting_class");

                    b.HasOne("SEP_Management.Models.Project", "Project")
                        .WithMany("IssueSettings")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_issue_setting_project");

                    b.HasOne("SEP_Management.Models.Subject", "Subject")
                        .WithMany("IssueSettings")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_issue_setting_subject");

                    b.Navigation("Class");

                    b.Navigation("Project");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SEP_Management.Models.IssueUpdate", b =>
                {
                    b.HasOne("SEP_Management.Models.Issue", "Issue")
                        .WithMany("IssueUpdates")
                        .HasForeignKey("IssueId")
                        .HasConstraintName("FK_issue_update_issue");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SEP_Management.Models.Milestone", b =>
                {
                    b.HasOne("SEP_Management.Models.Class", "Class")
                        .WithMany("Milestones")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_milestone_class");

                    b.HasOne("SEP_Management.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_milestone_project");

                    b.Navigation("Class");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SEP_Management.Models.Project", b =>
                {
                    b.HasOne("SEP_Management.Models.Class", "Class")
                        .WithMany("Projects")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_project_class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SEP_Management.Models.Subject", b =>
                {
                    b.HasOne("SEP_Management.Models.User", "Manager")
                        .WithMany("Subjects")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK_subject_user");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SEP_Management.Models.SubjectSetting", b =>
                {
                    b.HasOne("SEP_Management.Models.Subject", "Subject")
                        .WithMany("SubjectSettings")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_subject_setting_subject");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SEP_Management.Models.User", b =>
                {
                    b.HasOne("SEP_Management.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_user_role_roleid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SEP_Management.Models.Assignment", b =>
                {
                    b.Navigation("AssignSettings");
                });

            modelBuilder.Entity("SEP_Management.Models.Class", b =>
                {
                    b.Navigation("ClassStudents");

                    b.Navigation("IssueSettings");

                    b.Navigation("Milestones");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SEP_Management.Models.Issue", b =>
                {
                    b.Navigation("IssueUpdates");
                });

            modelBuilder.Entity("SEP_Management.Models.IssueSetting", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("SEP_Management.Models.Milestone", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("SEP_Management.Models.Project", b =>
                {
                    b.Navigation("IssueSettings");

                    b.Navigation("Issues");

                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("SEP_Management.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SEP_Management.Models.Subject", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("IssueSettings");

                    b.Navigation("SubjectSettings");
                });

            modelBuilder.Entity("SEP_Management.Models.User", b =>
                {
                    b.Navigation("ClassStudents");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
